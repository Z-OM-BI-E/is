1) CEASER CIPHER
#include <iostream>
#include <string>
using namespace std;
string encrypt(string text, int s)
{
    string result = " ";
    for (int i = 0; i < text.length(); i++)
    {
        if (isupper(text[i]))
        {
            result += char(int(text[i] + s - 65) % 26 + 65);
            cout << "upper case" << result;
        }
        else
        {
            result += char(int(text[i] + s - 97) % 26 + 97);
        }
    }
    return result;
}
string decrypt(string text, int s)
{
    string result = " ";
    for (int i = 0; i < text.length(); i++)
    {
        if (isupper(text[i]))
        {
            result += char(int(text[i] - s - 65) % 26 + 65);
            cout << "uppercase" << result;
        }
        else
        {
            result += char(int(text[i] - s - 97) % 26 + 97);
        }
    }
    return result;
}
int main()
{
    string text;
    int key = 0, opt;
    cout << "enter message:";
    cin >> text;
    cout << "enter key";
    cin >> key,
        cout << "do you want to \n 1)encrypt \n 2) decrypt \n enter choice";
    cin >> opt;
    switch (opt)
    {
    case 1:
    {
        cout << "encrypted text" << encrypt(text, key);
        break;
    }
    case 2:
    {
        cout << "decrypted text:" << decrypt(text, key);
        break;
    }
    default:
        cout << "invalid choice";
    }
    return 0;
}

2) TRANSPOSITION CIPHER
#include<bits/stdc++.h>
using namespace std;
string const key = "HACK"; 
map<int,int> keyMap;
void setPermutationOrder()
{			 
	for(int i=0; i < key.length(); i++)
	{
		keyMap[key[i]] = i;
	}
}
string encryptMessage(string msg)
{
	int row,col,j;
	string cipher = "";
	col = key.length(); 
	row = msg.length()/col; 
	if (msg.length() % col)
		row += 1;
	char matrix[row][col];
 	for (int i=0,k=0; i < row; i++)
	{
		for (int j=0; j<col; )
		{
			if(msg[k] == '\0')
			{
				matrix[i][j] = '_';	 
				j++;
			}
			if( isalpha(msg[k]) || msg[k]==' ')
			{ 
				matrix[i][j] = msg[k];
				j++;
			}
			k++;
		}
	}
	for (map<int,int>::iterator ii = keyMap.begin(); ii!=keyMap.end(); ++ii)
	{
		j=ii->second;
		for (int i=0; i<row; i++)
		{
			if( isalpha(matrix[i][j]) || matrix[i][j]==' ' || matrix[i][j]=='_')
				cipher += matrix[i][j];
		}
	}
	return cipher;
}
string decryptMessage(string cipher)
{
	int col = key.length();
	int row = cipher.length()/col;
	char cipherMat[row][col];
	for (int j=0,k=0; j<col; j++)
		for (int i=0; i<row; i++)
			cipherMat[i][j] = cipher[k++];
	int index = 0;
	for( map<int,int>::iterator ii=keyMap.begin(); ii!=keyMap.end(); ++ii)
		ii->second = index++;
	char decCipher[row][col];
	map<int,int>::iterator ii=keyMap.begin();
	int k = 0;
	for (int l=0,j; key[l]!='\0'; k++)
	{
		j = keyMap[key[l++]];
		for (int i=0; i<row; i++)
		{
			decCipher[i][k]=cipherMat[i][j];
		}
	}
	string msg = "";
	for (int i=0; i<row; i++)
	{
		for(int j=0; j<col; j++)
		{
			if(decCipher[i][j] != '_')
				msg += decCipher[i][j];
		}
	}
	return msg;
}
int main(void)
{
	string msg = "HELLO WORLD"; 
	setPermutationOrder();
	string cipher = encryptMessage(msg);
	cout << "Encrypted Message: " << cipher << endl;
	cout << "Decrypted Message: " << decryptMessage(cipher) << endl;
	return 0;
}

3)PLAYFAIR CIPHER
// C++ program to implement Playfair Cipher

#include <bits/stdc++.h>
using namespace std;
#define SIZE 30

// Function to convert the string to lowercase
void toLowerCase(char plain[], int ps)
{
	int i;
	for (i = 0; i < ps; i++) {
		if (plain[i] > 64 && plain[i] < 91)
			plain[i] += 32;
	}
}

// Function to remove all spaces in a string
int removeSpaces(char* plain, int ps)
{
	int i, count = 0;
	for (i = 0; i < ps; i++)
		if (plain[i] != ' ')
			plain[count++] = plain[i];
	plain[count] = '\0';
	return count;
}

// Function to generate the 5x5 key square
void generateKeyTable(char key[], int ks, char keyT[5][5])
{
	int i, j, k, flag = 0;

	// a 26 character hashmap
	// to store count of the alphabet
	int dicty[26] = { 0 };
	for (i = 0; i < ks; i++) {
		if (key[i] != 'j')
			dicty[key[i] - 97] = 2;
	}

	dicty['j' - 97] = 1;

	i = 0;
	j = 0;

	for (k = 0; k < ks; k++) {
		if (dicty[key[k] - 97] == 2) {
			dicty[key[k] - 97] -= 1;
			keyT[i][j] = key[k];
			j++;
			if (j == 5) {
				i++;
				j = 0;
			}
		}
	}

	for (k = 0; k < 26; k++) {
		if (dicty[k] == 0) {
			keyT[i][j] = (char)(k + 97);
			j++;
			if (j == 5) {
				i++;
				j = 0;
			}
		}
	}
}

// Function to search for the characters of a digraph
// in the key square and return their position
void search(char keyT[5][5], char a, char b, int arr[])
{
	int i, j;

	if (a == 'j')
		a = 'i';
	else if (b == 'j')
		b = 'i';

	for (i = 0; i < 5; i++) {

		for (j = 0; j < 5; j++) {

			if (keyT[i][j] == a) {
				arr[0] = i;
				arr[1] = j;
			}
			else if (keyT[i][j] == b) {
				arr[2] = i;
				arr[3] = j;
			}
		}
	}
}

// Function to find the modulus with 5
int mod5(int a) { return (a % 5); }

// Function to make the plain text length to be even
int prepare(char str[], int ptrs)
{
	if (ptrs % 2 != 0) {
		str[ptrs++] = 'z';
		str[ptrs] = '\0';
	}
	return ptrs;
}

// Function for performing the encryption
void encrypt(char str[], char keyT[5][5], int ps)
{
	int i, a[4];

	for (i = 0; i < ps; i += 2) {

		search(keyT, str[i], str[i + 1], a);

		if (a[0] == a[2]) {
			str[i] = keyT[a[0]][mod5(a[1] + 1)];
			str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
		}
		else if (a[1] == a[3]) {
			str[i] = keyT[mod5(a[0] + 1)][a[1]];
			str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
		}
		else {
			str[i] = keyT[a[0]][a[3]];
			str[i + 1] = keyT[a[2]][a[1]];
		}
	}
}

// Function to encrypt using Playfair Cipher
void encryptByPlayfairCipher(char str[], char key[])
{
	char ps, ks, keyT[5][5];

	// Key
	ks = strlen(key);
	ks = removeSpaces(key, ks);
	toLowerCase(key, ks);

	// Plaintext
	ps = strlen(str);
	toLowerCase(str, ps);
	ps = removeSpaces(str, ps);

	ps = prepare(str, ps);

	generateKeyTable(key, ks, keyT);

	encrypt(str, keyT, ps);
}

// Driver code
int main()
{
	char str[SIZE], key[SIZE];

	// Key to be encrypted
	strcpy(key, "Monarchy");
	cout << "Key text: " << key << "\n";

	// Plaintext to be encrypted
	strcpy(str, "instruments");
	cout << "Plain text: " << str << "\n";

	// encrypt using Playfair Cipher
	encryptByPlayfairCipher(str, key);

	cout << "Cipher text: " << str << "\n";

	return 0;
}

// This code is contributed by aditya942003patil


4)RAIL FENCE CIPHER
#include <bits/stdc++.h>
using namespace std;
string encryptRailFence(string text, int key)
{
	char rail[key][(text.length())];
	for (int i=0; i < key; i++)
		for (int j = 0; j < text.length(); j++)
			rail[i][j] = '\n';
	bool dir_down = false;
	int row = 0, col = 0;
	for (int i=0; i < text.length(); i++)
	{
		if (row == 0 || row == key-1)
			dir_down = !dir_down;
		rail[row][col++] = text[i];
		dir_down?row++ : row--;
	}
	string result;
	for (int i=0; i < key; i++)
		for (int j=0; j < text.length(); j++)
			if (rail[i][j]!='\n')
result.push_back(rail[i][j]);

	return result;
}
string decryptRailFence(string cipher, int key)
{
	char rail[key][cipher.length()];
	for (int i=0; i < key; i++)
		for (int j=0; j < cipher.length(); j++)
			rail[i][j] = '\n';
	bool dir_down;
	int row = 0, col = 0;
	for (int i=0; i < cipher.length(); i++)
	{
		if (row == 0)
			dir_down = true;
		if (row == key-1)
			dir_down = false;
		rail[row][col++] = '*';
		dir_down?row++ : row--;
	}
	int index = 0;
	for (int i=0; i<key; i++)
		for (int j=0; j<cipher.length(); j++)
			if (rail[i][j] == '*' && index<cipher.length())
				rail[i][j] = cipher[index++];
	string result;
	row = 0, col = 0;
	for (int i=0; i< cipher.length(); i++)
	{
		if (row == 0)
			dir_down = true;
		if (row == key-1)
			dir_down = false;
		if (rail[row][col] != '*')
			result.push_back(rail[row][col++]);
		dir_down?row++: row--;
	}
	return result;
}
int main()
{
	string text; int key;
	cout<<"Enter the text to encrypt: "; 
	cin>>text;
	cout<<"Enter the key: "; 
	cin>>key;
	cout<<encryptRailFence(text,key)<<endl;
	cout<<"Enter the text to decrypt: "; 
	cin>>text;
	cout<<"Enter the key: "; 
	cin>>key;
	cout<<decryptRailFence(text,key)<<endl;
	return 0;
}

5)DATA ENCRYPTION STANDARD
#include<iostream> 
#include<bitset> 
#include<string> 
using namespace std;
const int IP[]={
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7};
void encrypt{string plaintext,string key)}
   bitset<64>pt(plaintext).k(key.ct);
    for(int i=0; i<64; i++) 
        ct[IP[i]-i]=pt[i];
   cout<< “cipher text:”<<ct<<endl;
}
int main(){
encrypt(“1010101010”);
    return 0;
}


6)SIMPLIFIED DATA ENCRYPTION STANDARD


7)Rivest-Shamir-Adleman encryption(RSA)
// C program for RSA asymmetric cryptographic
// algorithm. For demonstration values are
// relatively small compared to practical
// application
#include <bits/stdc++.h>
using namespace std;

// Returns gcd of a and b
int gcd(int a, int h)
{
	int temp;
	while (1) {
		temp = a % h;
		if (temp == 0)
			return h;
		a = h;
		h = temp;
	}
}

// Code to demonstrate RSA algorithm
int main()
{
	// Two random prime numbers
	double p = 3;
	double q = 7;

	// First part of public key:
	double n = p * q;

	// Finding other part of public key.
	// e stands for encrypt
	double e = 2;
	double phi = (p - 1) * (q - 1);
	while (e < phi) {
		// e must be co-prime to phi and
		// smaller than phi.
		if (gcd(e, phi) == 1)
			break;
		else
			e++;
	}

	// Private key (d stands for decrypt)
	// choosing d such that it satisfies
	// d*e = 1 + k * totient
	int k = 2; // A constant value
	double d = (1 + (k * phi)) / e;

	// Message to be encrypted
	double msg = 12;

	printf("Message data = %lf", msg);

	// Encryption c = (msg ^ e) % n
	double c = pow(msg, e);
	c = fmod(c, n);
	printf("\nEncrypted data = %lf", c);

	// Decryption m = (c ^ d) % n
	double m = pow(c, d);
	m = fmod(m, n);
	printf("\nOriginal Message Sent = %lf", m);

	return 0;
}
// This code is contributed by Akash Sharan.


8)DIFFIE HELLMAN ALGORITHM
#include<cmath> 
#include<iostream> 
using namespace std;
long long int power(long long int a, long long int b, long long int P)
{
     if (b == 1)
       return a;
     else
       return (((long long int)pow(a, b)) % P);
}
int main()
{
     long long int P, G, x, a, y, b, ka, kb; 
     P = 23;
     cout << "The value of P : " << P << endl;
    G = 9;
    cout << "The value of G : " << G << endl;
    a = 4;
    cout << "The private key a for Alice : " << a << endl;
    x = power(G, a, P);
    b = 3;
    cout << "The private key b for Bob : " << b << endl;
    y = power(G, b, P);
    ka = power(y, a, P);
    kb = power(x, b, P);
    cout << "Secret key for the Alice is : " << ka << endl;
    cout << "Secret key for the Bob is : " << kb << endl;
    return 0;
}

9)MD5
import hashlib
a='GeeksforGeeks'
result =hashlib.md5(a.encode)
print("The byte equivalent of hash is : ", end ="")
print(result.hexdigest())

10)SHA 1
import hashlib
str = "GeeksforGeeks"
result = hashlib.sha1(str.encode()) 
print("The hexadecimal equivalent of SHA1 is : ") 
print(result.hexdigest()) 

11)
